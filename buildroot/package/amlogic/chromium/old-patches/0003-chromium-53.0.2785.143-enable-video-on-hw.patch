Index: chromium-53.0.2785.143/src/cc/output/gl_renderer.cc
===================================================================
--- chromium-53.0.2785.143.orig/src/cc/output/gl_renderer.cc
+++ chromium-53.0.2785.143/src/cc/output/gl_renderer.cc
@@ -6,6 +6,9 @@
 
 #include <stddef.h>
 #include <stdint.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <errno.h>
 
 #include <algorithm>
 #include <limits>
@@ -2083,6 +2086,29 @@ void GLRenderer::DrawYUVVideoQuad(const
                                   const gfx::QuadF* clip_region) {
   SetBlendEnabled(quad->ShouldDrawWithBlending());
 
+  LOG(INFO) << "quad rect:" << quad->rect.ToString() << ", visible_rect: " << quad->visible_rect.ToString()
+      << ", shared_quad_state->visible_rect:" << quad->shared_quad_state->visible_quad_layer_rect.ToString()
+      << ", quad_to_target_transform: " << quad->shared_quad_state->quad_to_target_transform.ToString();
+  gfx::Vector2dF translationValue = quad->shared_quad_state->quad_to_target_transform.To2dTranslation();
+  gfx::Vector2dF scaleValue = quad->shared_quad_state->quad_to_target_transform.Scale2d();
+  LOG(INFO) << "x_offset:" << translationValue.x() << ", y_offset:" << translationValue.y()
+      << ", x_scale:" << scaleValue.x() << ", x_scale:" << scaleValue.y();
+
+  char buf[64];
+  memset(buf, 0, 64);
+  sprintf(buf, "%d %d %d %d", (int)translationValue.x(), (int)translationValue.y()
+    , (int)(translationValue.x() + quad->visible_rect.width()*scaleValue.x())
+    , (int)(translationValue.y() + quad->visible_rect.height()*scaleValue.y()));
+
+  int fd = open("/sys/class/video/axis", O_CREAT | O_RDWR | O_TRUNC, 0644);
+  if (fd >= 0) {
+      LOG(INFO) << "set video axis:" << buf;
+      write(fd, buf, strlen(buf));
+      close(fd);
+  } else {
+      LOG(ERROR) << "unable to open /sys/class/video/axis";
+  }
+
   TexCoordPrecision tex_coord_precision = TexCoordPrecisionRequired(
       gl_, &highp_threshold_cache_, highp_threshold_min_,
       quad->shared_quad_state->visible_quad_layer_rect.bottom_right());
Index: chromium-53.0.2785.143/src/cc/output/shader.cc
===================================================================
--- chromium-53.0.2785.143.orig/src/cc/output/shader.cc
+++ chromium-53.0.2785.143/src/cc/output/shader.cc
@@ -2092,7 +2092,8 @@ std::string FragmentShaderYUVVideo::GetS
       vec2 uv_unsigned = GetUV(uv_clamped);
       vec3 yuv = vec3(y_raw, uv_unsigned) + yuv_adj;
       vec3 rgb = yuv_matrix * yuv;
-      gl_FragColor = vec4(rgb, 1.0) * GetAlpha(ya_clamped);
+      //gl_FragColor = vec4(rgb, 1.0) * GetAlpha(ya_clamped);
+      gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
     }
   });
 
Index: chromium-53.0.2785.143/src/ozone/platform/ozone_wayland_window.cc
===================================================================
--- chromium-53.0.2785.143.orig/src/ozone/platform/ozone_wayland_window.cc
+++ chromium-53.0.2785.143/src/ozone/platform/ozone_wayland_window.cc
@@ -25,7 +25,7 @@ OzoneWaylandWindow::OzoneWaylandWindow(P
     : delegate_(delegate),
       sender_(sender),
       window_manager_(window_manager),
-      transparent_(false),
+      transparent_(true),
       bounds_(bounds),
       parent_(0),
       state_(UNINITIALIZED),
@@ -183,8 +183,9 @@ void OzoneWaylandWindow::ToggleFullscree
     NOTREACHED() << "Unable to retrieve valid gfx::Screen";
 
   SetBounds(screen->GetPrimaryDisplay().bounds());
-  state_ = ui::FULLSCREEN;
-  SendWidgetState();
+  //if video on hw, dont call wl_shell_surface_set_fullscreen
+  //state_ = ui::FULLSCREEN;
+  //SendWidgetState();
 }
 
 void OzoneWaylandWindow::Maximize() {
