diff -Naur a/src/components/viz/service/display/gl_renderer.cc b/src/components/viz/service/display/gl_renderer.cc
--- a/src/components/viz/service/display/gl_renderer.cc	2018-09-10 18:27:30.802402608 +0800
+++ b/src/components/viz/service/display/gl_renderer.cc	2018-09-10 17:50:07.598360524 +0800
@@ -6,6 +6,9 @@
 
 #include <stddef.h>
 #include <stdint.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <errno.h>
 
 #include <algorithm>
 #include <limits>
@@ -337,9 +340,42 @@
   use_swap_with_bounds_ = context_caps.swap_buffers_with_bounds;
 
   InitializeSharedObjects();
+
+  use_hw_decoder_ = false;
+  vdec_status_watcher_.reset();
+  if(current_task_runner_) {
+    vdec_status_watcher_ = std::make_unique<base::FilePathWatcher>();
+    if (!vdec_status_watcher_->Watch(
+            base::FilePath("/tmp/use_hw_dec"), false,
+          base::Bind(&GLRenderer::OnVdecStatusChanged, base::Unretained(this)))) {
+      LOG(ERROR) << "failed to add to file watch list";
+      vdec_status_watcher_.reset();
+    }
+  }
+}
+
+void GLRenderer::OnVdecStatusChanged(const base::FilePath& path, bool error) {
+  if(error) {
+    return;
+  }
+  char buf[16];
+  int fd = open(path.value().c_str(), O_RDONLY);
+  if (fd >= 0) {
+    int len = read(fd, buf, sizeof(buf));
+    close(fd);
+    if(len > 0) {
+      use_hw_decoder_ = strncmp(buf, "1", len) == 0;
+      LOG(ERROR) << "use hw decoder: " << use_hw_decoder_;
+    }
+  } else {
+    LOG(ERROR) << "failed to open " << path.value();
+  }
 }
 
 GLRenderer::~GLRenderer() {
+  if(vdec_status_watcher_) {
+    vdec_status_watcher_.reset();
+  }
   CleanupSharedObjects();
 
   if (context_visibility_) {
@@ -2055,6 +2091,37 @@
                                   const gfx::QuadF* clip_region) {
   SetBlendEnabled(quad->ShouldDrawWithBlending());
 
+  gfx::Vector2dF translationValue = quad->shared_quad_state->quad_to_target_transform.To2dTranslation();
+  gfx::Vector2dF scaleValue = quad->shared_quad_state->quad_to_target_transform.Scale2d();
+
+  static int video_axis_left, video_axis_top, video_axis_right, video_axis_bottom = 0;
+  int left = (int)translationValue.x();
+  int top = (int)translationValue.y();
+  int right = (int)(translationValue.x() + quad->visible_rect.width()*scaleValue.x());
+  int bottom = (int)(translationValue.y() + quad->visible_rect.height()*scaleValue.y());
+
+  if(left != video_axis_left ||
+     top != video_axis_top ||
+     right != video_axis_right ||
+     bottom != video_axis_bottom) {
+
+    char buf[64];
+    int len = snprintf(buf, sizeof(buf), "%d %d %d %d", left, top, right, bottom);
+
+    int fd = open("/sys/class/video/axis", O_CREAT | O_RDWR | O_TRUNC, 0644);
+    if (fd >= 0) {
+      LOG(INFO) << "set video axis:" << buf;
+      write(fd, buf, len);
+      close(fd);
+    } else {
+      LOG(ERROR) << "unable to open /sys/class/video/axis";
+    }
+    video_axis_left = left;
+    video_axis_top = top;
+    video_axis_right = right;
+    video_axis_bottom = bottom;
+  }
+
   TexCoordPrecision tex_coord_precision = TexCoordPrecisionRequired(
       gl_, &highp_threshold_cache_, settings_->highp_threshold_min,
       quad->shared_quad_state->visible_quad_layer_rect.size());
@@ -2195,6 +2262,10 @@
   gl_->Uniform1f(current_program_->resource_offset_location(),
                  quad->resource_offset);
 
+  if (current_program_->use_hardware_decoder_location() != -1) {
+    gl_->Uniform1i(current_program_->use_hardware_decoder_location(),
+                 use_hw_decoder_);
+  }
   // The transform and vertex data are used to figure out the extents that the
   // un-antialiased quad should have and which vertex this is and the float
   // quad passed in via uniform is the actual geometry that gets used to draw
diff -Naur a/src/components/viz/service/display/gl_renderer.h b/src/components/viz/service/display/gl_renderer.h
--- a/src/components/viz/service/display/gl_renderer.h	2018-08-28 10:54:41.000000000 +0800
+++ b/src/components/viz/service/display/gl_renderer.h	2018-09-10 17:15:00.586320995 +0800
@@ -13,6 +13,7 @@
 #include "base/cancelable_callback.h"
 #include "base/containers/circular_deque.h"
 #include "base/macros.h"
+#include "base/files/file_path_watcher.h"
 #include "components/viz/common/gpu/context_cache_controller.h"
 #include "components/viz/common/quads/debug_border_draw_quad.h"
 #include "components/viz/common/quads/render_pass_draw_quad.h"
@@ -314,6 +315,8 @@
 
   ResourceFormat BackbufferFormat() const;
 
+  void OnVdecStatusChanged(const base::FilePath& path, bool error);
+
   // A map from RenderPass id to the texture used to draw the RenderPass from.
   base::flat_map<RenderPassId, ScopedRenderPassTexture> render_pass_textures_;
 
@@ -404,6 +407,10 @@
 
   unsigned num_triangles_drawn_ = 0;
 
+  bool use_hw_decoder_;
+  std::unique_ptr<base::FilePathWatcher>
+          vdec_status_watcher_;
+
   // This may be null if the compositor is run on a thread without a
   // MessageLoop.
   scoped_refptr<base::SingleThreadTaskRunner> current_task_runner_;
diff -Naur a/src/components/viz/service/display/program_binding.h b/src/components/viz/service/display/program_binding.h
--- a/src/components/viz/service/display/program_binding.h	2018-08-28 10:54:41.000000000 +0800
+++ b/src/components/viz/service/display/program_binding.h	2018-09-10 11:06:35.853906296 +0800
@@ -322,6 +322,10 @@
     return fragment_shader_.tint_color_matrix_location_;
   }
 
+  int use_hardware_decoder_location() const {
+    return fragment_shader_.use_hw_decoder_location_;
+  }
+
  private:
   void InitializeDebugBorderProgram() {
     // Initialize fragment program.
diff -Naur a/src/components/viz/service/display/shader.cc b/src/components/viz/service/display/shader.cc
--- a/src/components/viz/service/display/shader.cc	2018-09-10 18:27:30.802402608 +0800
+++ b/src/components/viz/service/display/shader.cc	2018-09-10 10:47:23.869884684 +0800
@@ -459,6 +460,8 @@
   if (has_tint_color_matrix_)
     uniforms.emplace_back("tint_color_matrix");
 
+  uniforms.push_back("use_hardware_decoder");
+
   locations.resize(uniforms.size());
 
   GetProgramUniformLocations(context, program, uniforms.size(), uniforms.data(),
@@ -521,6 +524,8 @@
   if (has_tint_color_matrix_)
     tint_color_matrix_location_ = locations[index++];
 
+  use_hw_decoder_location_ = locations[index++];
+
   DCHECK_EQ(index, locations.size());
 }
 
@@ -1019,6 +1024,8 @@
     SRC("texColor = tint_color_matrix * texColor;");
   }
 
+  HDR("uniform bool use_hardware_decoder;");
+
   // Include header text for alpha.
   if (has_uniform_alpha_) {
     HDR("uniform float alpha;");
@@ -1052,6 +1059,11 @@
     case FRAG_COLOR_MODE_DEFAULT:
       DCHECK_EQ(blend_mode_, BLEND_MODE_NONE);
       SRC("gl_FragColor = texColor;");
+      if (input_color_type_ == INPUT_COLOR_SOURCE_YUV_TEXTURES) {
+        SRC("if (use_hardware_decoder) {"
+            "gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);"
+            "}");
+      }
       break;
     case FRAG_COLOR_MODE_OPAQUE:
       DCHECK_EQ(blend_mode_, BLEND_MODE_NONE);
diff -Naur a/src/components/viz/service/display/shader.h b/src/components/viz/service/display/shader.h
--- a/src/components/viz/service/display/shader.h	2018-07-17 16:36:45.000000000 +0800
+++ b/src/components/viz/service/display/shader.h	2018-09-10 10:31:37.125866923 +0800
@@ -316,6 +316,8 @@
   int lut_texture_location_ = -1;
   int lut_size_location_ = -1;
 
+  int use_hw_decoder_location_ = -1;
+
  private:
   friend class Program;
 
--- a/src/media/filters/ffmpeg_video_decoder.cc	2018-09-10 18:27:23.034402462 +0800
+++ b/src/media/filters/ffmpeg_video_decoder.cc	2018-09-10 17:42:25.342351851 +0800
@@ -6,6 +6,7 @@
 
 #include <stddef.h>
 #include <stdint.h>
+#include <fcntl.h>
 
 #include <algorithm>
 #include <string>
@@ -108,6 +109,14 @@
     static_cast<VideoFrame*>(opaque)->Release();
 }
 
+static void SetUseHwDecoderFlag(bool flag) {
+  int fd = open("/tmp/use_hw_dec", O_CREAT | O_WRONLY, 0644);
+  if(fd >= 0) {
+    write(fd, flag ? "1" : "0", 1);
+    close(fd);
+  }
+}
+
 // static
 bool FFmpegVideoDecoder::IsCodecSupported(VideoCodec codec) {
   return avcodec_find_decoder(VideoCodecToCodecID(codec)) != nullptr;
@@ -116,6 +125,7 @@
 FFmpegVideoDecoder::FFmpegVideoDecoder(MediaLog* media_log)
     : media_log_(media_log), state_(kUninitialized), decode_nalus_(false) {
   thread_checker_.DetachFromThread();
+  SetUseHwDecoderFlag(false);
 }
 
 int FFmpegVideoDecoder::GetVideoBuffer(struct AVCodecContext* codec_context,
@@ -330,6 +340,7 @@
 FFmpegVideoDecoder::~FFmpegVideoDecoder() {
   DCHECK(thread_checker_.CalledOnValidThread());
 
+  SetUseHwDecoderFlag(false);
   if (state_ != kUninitialized)
     ReleaseFFmpegResources();
 }
@@ -407,6 +418,8 @@
   DCHECK(config.IsValidConfig());
   DCHECK(!config.is_encrypted());
 
+  bool use_hw_decoder = true;
+
   // Release existing decoder resources if necessary.
   ReleaseFFmpegResources();
 
@@ -432,9 +445,12 @@
 	  codec_context_->codec_id = AV_CODEC_ID_MPEGVIDEO_AML;
 	  break;
 	default:
+      use_hw_decoder = false;
 	  break;
   }
 
+  SetUseHwDecoderFlag(use_hw_decoder);
+
   codec_context_->thread_count = GetThreadCount(config);
   codec_context_->thread_type =
       FF_THREAD_SLICE | (low_delay ? 0 : FF_THREAD_FRAME);
