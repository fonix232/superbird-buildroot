diff -rNu swupdate-2018.11-Orig/handlers/Config.in swupdate-2018.11/handlers/Config.in
--- swupdate-2018.11-Orig/handlers/Config.in	2018-12-05 22:03:06.000000000 +0800
+++ swupdate-2018.11/handlers/Config.in	2019-03-21 17:31:51.961303160 +0800
@@ -99,6 +99,14 @@
 	  This is a simple handler that simply copies
 	  into the destination.
 
+config EXT4
+	bool "ext4"
+	depends on !UBIVOL
+	default n
+	help
+	  This is a ext4 handler that to write sparse 
+	  ext4 image into the destination.
+
 config LUASCRIPTHANDLER
 	bool "Lua Script"
 	depends on LUA
diff -rNu swupdate-2018.11-Orig/handlers/Makefile swupdate-2018.11/handlers/Makefile
--- swupdate-2018.11-Orig/handlers/Makefile	2018-12-05 22:03:06.000000000 +0800
+++ swupdate-2018.11/handlers/Makefile	2019-03-21 17:32:39.725304568 +0800
@@ -14,6 +14,7 @@
 obj-$(CONFIG_CFIHAMMING1)+= flash_hamming1_handler.o
 obj-$(CONFIG_LUASCRIPTHANDLER) += lua_scripthandler.o
 obj-$(CONFIG_RAW)	+= raw_handler.o
+obj-$(CONFIG_EXT4) += ext4_handler.o
 obj-$(CONFIG_REMOTE_HANDLER) += remote_handler.o
 obj-$(CONFIG_SHELLSCRIPTHANDLER) += shell_scripthandler.o
 obj-$(CONFIG_SWUFORWARDER_HANDLER) += swuforward_handler.o
diff -rNu swupdate-2018.11-Orig/handlers/ext4_handler.c swupdate-2018.11/handlers/ext4_handler.c
--- swupdate-2018.11-Orig/handlers/ext4_handler.c	1970-01-01 08:00:00.000000000 +0800
+++ swupdate-2018.11/handlers/ext4_handler.c	2019-03-21 17:31:51.961303160 +0800
@@ -0,0 +1,624 @@
+/*
+ * (C) Copyright 2013
+ * Stefano Babic, DENX Software Engineering, sbabic@denx.de.
+ * 	on behalf of ifm electronic GmbH
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ *
+ *  add by zhigang.yu@amlogic.com
+ *  2017.11.2
+ */
+
+ #include <stdio.h>
+ #include <stdlib.h>
+ #include <string.h>
+ #include <stdint.h>
+#include <stdbool.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+ 
+ #include "handler.h"
+ #include "swupdate.h"
+ #include "util.h"
+ #include "sslapi.h"
+
+ #define SIZE_1M (1024*1024)
+#define SIZE_10M (10 * SIZE_1M)
+#define SIZE_150M (150 * SIZE_1M)
+#define COPY_BUF_SIZE SIZE_1M
+
+#define __le64 u64
+#define __le32 u32
+#define __le16 u16
+
+#define __be64 u64
+#define __be32 u32
+#define __be16 u16
+
+#define __u64 u64
+#define __u32 u32
+#define __u16 u16
+#define __u8 u8
+
+typedef unsigned long long u64;
+typedef signed long long s64;
+typedef unsigned int u32;
+typedef unsigned short int u16;
+typedef unsigned char u8;
+
+#define BUFF_SIZE	 16384
+#define SPARSE_HEADER_MAGIC	0xed26ff3a
+#define SPARSE_HEADER_MAJOR_VER 1
+
+#define CHUNK_TYPE_RAW		 0xCAC1
+#define CHUNK_TYPE_FILL		 0xCAC2
+#define CHUNK_TYPE_DONT_CARE  0xCAC3
+#define CHUNK_TYPE_CRC32           0xCAC4
+
+static uint32_t crc32_tab[] = {
+        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
+        0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
+        0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
+        0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
+        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
+        0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
+        0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
+        0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
+        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
+        0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
+        0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
+        0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
+        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
+        0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
+        0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
+        0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
+        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
+        0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
+        0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
+        0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
+        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
+        0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
+        0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
+        0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
+        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
+        0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
+        0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
+        0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
+        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
+        0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
+        0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
+        0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
+        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
+        0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
+        0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
+        0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
+        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
+        0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
+        0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
+        0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
+        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
+        0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
+        0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
+};
+
+typedef struct sparse_header {
+  __le32	magic;		/* 0xed26ff3a */
+  __le16	major_version;	/* (0x1) - reject images with higher major versions */
+  __le16	minor_version;	/* (0x0) - allow images with higer minor versions */
+  __le16	file_hdr_sz;	/* 28 bytes for first revision of the file format */
+  __le16	chunk_hdr_sz;	/* 12 bytes for first revision of the file format */
+  __le32	blk_sz;		/* block size in bytes, must be a multiple of 4 (4096) */
+  __le32	total_blks;	/* total blocks in the non-sparse output image */
+  __le32	total_chunks;	/* total chunks in the sparse input image */
+  __le32	image_checksum; /* CRC32 checksum of the original data, counting "don't care" */
+				/* as 0. Standard 802.3 polynomial, use a Public Domain */
+				/* table implementation */
+} sparse_header_t;
+
+typedef struct chunk_header {
+  __le16	chunk_type;	/* 0xCAC1 -> raw; 0xCAC2 -> fill; 0xCAC3 -> don't care */
+  __le16	reserved1;
+  __le32	chunk_sz;	/* in blocks in output image */
+  __le32	total_sz;	/* in bytes of chunk input file including chunk header and data */
+} chunk_header_t;
+
+static char *Bufstart = NULL;
+static char *copyBuf = NULL;
+static char *TmpBuf = NULL;
+static int curValidSparseMergeDataLen = 0;
+#define CHUNK_HEADER_LEN (sizeof(chunk_header_t))
+
+void ext4_handler(void);
+
+/*
+ * A function that calculates the CRC-32 based on the table above is
+ * given below for documentation purposes. An equivalent implementation
+ * of this function that's actually used in the kernel can be found
+ * in sys/libkern.h, where it can be inlined.
+ */
+uint32_t sparse_crc32(uint32_t crc_in, const void *buf, int size)
+{
+        const uint8_t *p = buf;
+        uint32_t crc;
+
+        crc = crc_in ^ ~0U;
+        while (size--)
+                crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
+        return crc ^ ~0U;
+}
+
+static int write_all(int fd, void *buf, size_t len)
+{
+    size_t total = 0;
+    int ret = 0;
+    char *ptr = buf;
+
+    while (total < len) {
+        ret = write(fd, ptr, len - total);
+	 if (ret < 0)
+	    return ret;
+	 if (ret == 0)
+	    return total;
+	 ptr += ret;
+	 total += ret;
+    }
+
+    return total;
+}
+
+static int process_raw_chunk(const char *chunk_data, int out, u32 blocks, u32 blk_sz, u32 *crc32)
+{
+    int ret = 0;
+    int chunk = 0;
+    u64 len = (u64)blocks * blk_sz;
+    char *pChunkData = (char *)chunk_data;
+
+    while (len) {
+        chunk = (len > COPY_BUF_SIZE) ? COPY_BUF_SIZE : len;
+        memset(copyBuf, 0, COPY_BUF_SIZE);
+        memcpy(copyBuf, pChunkData, chunk);
+
+	 *crc32 = sparse_crc32(*crc32, copyBuf, chunk);
+	 ret = write_all(out, copyBuf, chunk);
+        if (ret != chunk) {
+            printf("write returned an error copying a raw chunk\n");
+            return -1;
+        }
+        len -= chunk;
+        pChunkData = pChunkData + chunk;
+    }
+
+    return blocks;
+}
+
+static int process_fill_chunk(const char *chunk_data, int out, u32 blocks, u32 blk_sz, u32 *crc32)
+{
+    int ret = 0;
+    int chunk = 0;
+    u32 fill_val = 0;
+    u32 *fillbuf = NULL;
+    unsigned int i = 0;
+    u64 len = (u64)blocks * blk_sz;
+
+    /* Fill copy_buf with the fill value */
+    memcpy((char *)&fill_val, chunk_data, sizeof(fill_val));
+    fillbuf = (u32 *)copyBuf;
+
+    if (fill_val == 0) {
+        lseek(out, len, SEEK_CUR);
+        return blocks;
+    }
+
+    for (i = 0; i < (COPY_BUF_SIZE / sizeof(fill_val)); i++) {
+        fillbuf[i] = fill_val;
+    }
+
+    while (len) {
+        chunk = (len > COPY_BUF_SIZE) ? COPY_BUF_SIZE : len;
+        *crc32 = sparse_crc32(*crc32, copyBuf, chunk);
+        ret = write_all(out, copyBuf, chunk);
+        if (ret != chunk) {
+            printf("write returned an error copying a raw chunk\n");
+            return -1;
+        }
+        len -= chunk;
+    }
+
+    return blocks;
+}
+
+static int process_skip_chunk(int out, u32 blocks, u32 blk_sz, u32 *crc32)
+{
+    //len needs to be 64 bits, as the sparse file specifies the skip amount as a 32 bit value of blocks.
+    u64 len = (u64)blocks * blk_sz;
+    lseek64(out, len, SEEK_CUR);
+    return blocks;
+}
+
+static int process_crc32_chunk(const char *chunk_data, u32 crc32)
+{
+    u32 data_crc32 = 0;
+
+    memcpy((char *)&data_crc32, chunk_data, 4);
+
+    if (data_crc32 != crc32) {
+        printf("computed crc32 of 0x%8.8x, expected 0x%8.8x\n", crc32, data_crc32);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int flash_buffer_copy() 
+{
+    memcpy(TmpBuf, Bufstart, curValidSparseMergeDataLen);
+    memset(TmpBuf+curValidSparseMergeDataLen, 0, SIZE_150M-curValidSparseMergeDataLen);
+    Bufstart = TmpBuf;
+}
+
+static int flash_write_ext4(int ps, unsigned int size, int fd)
+{
+    int ret = 0;
+    int result = 0;
+    u32 crc32 = 0;
+    int Readlen = 0;
+    int isFinished = 0;
+    static bool Head = true;
+    static bool Flag = true;
+    static unsigned int total_blocks = 0;
+    static unsigned int chunk = 0;
+    static int processLen = 0;
+    static sparse_header_t sparse_header;
+    static chunk_header_t chunk_header;
+    static int whetherChunkDataNotEnough = 0;
+
+    //malloc 1M
+    copyBuf = (char *)malloc(SIZE_1M);
+    if (copyBuf == NULL ) {
+        printf("can't malloc copyBuf,%s\n", strerror(errno));
+        return -1;
+    }
+
+    //malloc 150M
+    TmpBuf = (char *)malloc(SIZE_150M);
+    if (TmpBuf == NULL ) {
+        printf("can't malloc TmpBuf,%s\n", strerror(errno));
+        free(copyBuf);
+        copyBuf = NULL;
+        return -1;
+    }
+
+    memset(TmpBuf, 0, SIZE_150M);
+    Bufstart = TmpBuf;
+
+    //seek ps to file
+    int offset = size*(-1);
+    lseek(ps, offset, SEEK_CUR);
+
+    //read 10M data to buff
+    Readlen = read(ps, TmpBuf, SIZE_10M);
+    if (Readlen < SIZE_10M) {
+        printf("can't read %d, maybe file size < %d!\n", SIZE_10M, SIZE_10M);
+        isFinished = 1;
+    }
+    curValidSparseMergeDataLen += Readlen; 
+
+    //get and check sparse header
+    memcpy((char *)&sparse_header, TmpBuf, sizeof(sparse_header));
+
+    if (sparse_header.magic != SPARSE_HEADER_MAGIC) {
+        printf("Bad magic:%08x\n", sparse_header.magic);
+        goto ERR;
+    }
+
+    if (sparse_header.major_version != SPARSE_HEADER_MAJOR_VER) {
+        printf("Unknown major version number\n");
+        goto ERR;
+    }
+
+    printf("expected to write total_blks:%d\n", sparse_header.total_blks);
+    printf("expected to write blk_sz:%d\n", sparse_header.blk_sz);
+    printf("expected to write total_chunks:%d\n", sparse_header.total_chunks);
+    printf("start to write ext4 image datas\nwaiting...\n");
+
+    //delete sparse_header from buff
+    Bufstart += sizeof(sparse_header);
+    curValidSparseMergeDataLen -= sizeof(sparse_header);
+
+    //get and prase chunk data
+    while(1) {
+        processLen = 0;
+        //get chunk header
+        if (!whetherChunkDataNotEnough) {
+            memset((char *)&chunk_header, 0, sizeof(chunk_header));
+            memcpy((char *)&chunk_header, Bufstart, sizeof(chunk_header));
+
+            Bufstart += sizeof(chunk_header);
+            curValidSparseMergeDataLen -= sizeof(chunk_header);
+
+            if (sparse_header.chunk_hdr_sz > CHUNK_HEADER_LEN) {
+                // Skip the remaining bytes in a header that is longer than we expected.
+                Bufstart +=sparse_header.chunk_hdr_sz - CHUNK_HEADER_LEN;
+                curValidSparseMergeDataLen -= sparse_header.chunk_hdr_sz - CHUNK_HEADER_LEN;
+            }
+        }
+
+        switch (chunk_header.chunk_type) {
+            case CHUNK_TYPE_RAW:
+            {
+                processLen = chunk_header.chunk_sz * sparse_header.blk_sz;
+                if (processLen > SIZE_150M) {
+                    printf("chunk:%d processLen(%d) > maximize merge buf size(%d)\n", chunk, processLen, SIZE_150M);
+                    goto ERR;
+                }
+
+                if (processLen > curValidSparseMergeDataLen) {
+                    // this chunk process data not enough,so continue to get datas, and next time not remove chunk head
+                    whetherChunkDataNotEnough = 1;
+                    flash_buffer_copy();
+                    if (curValidSparseMergeDataLen > SIZE_150M - SIZE_10M) {
+                        printf("single chunk can not over %d\n",  SIZE_150M - SIZE_10M);
+                        goto ERR;
+                    }
+
+                    Readlen = read(ps, TmpBuf+curValidSparseMergeDataLen, SIZE_10M);
+                    if (Readlen < SIZE_10M) {
+                        printf("can't read %d, maybe file end!\n", SIZE_10M);
+                        isFinished = 1;
+                    }
+                    curValidSparseMergeDataLen += Readlen;
+                    continue;
+                }
+
+                if (chunk_header.total_sz != (sparse_header.chunk_hdr_sz + (chunk_header.chunk_sz * sparse_header.blk_sz))) {
+                    printf("RAW:  bogus chunk size for chunk:%d\n", chunk);
+                    goto ERR;
+                }
+
+                ret = process_raw_chunk(Bufstart, fd, chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+                if (ret < 0) {
+                    goto ERR;
+                }
+
+                total_blocks += ret;
+                Bufstart += processLen;
+                curValidSparseMergeDataLen -= processLen;
+
+                printf("RAW:  chunk:%d, wrote total_blocks:%d, processLen:%d, curValidSparseMergeDataLen:%d\n", 
+                                    chunk, total_blocks, processLen, curValidSparseMergeDataLen);
+
+                chunk ++;
+            }
+            break;
+
+            case CHUNK_TYPE_FILL:
+            {
+                processLen = sizeof(u32);
+                if (processLen > curValidSparseMergeDataLen) {
+                    whetherChunkDataNotEnough = 1;
+                    flash_buffer_copy();
+                    Readlen = read(ps, TmpBuf+curValidSparseMergeDataLen, SIZE_10M);
+                    if (Readlen < SIZE_10M) {
+                        printf("can't read %d, maybe file end!\n", SIZE_10M);
+                        isFinished = 1;
+                    }
+                    curValidSparseMergeDataLen += Readlen;
+                    continue;
+                }
+
+                if (chunk_header.total_sz != (sparse_header.chunk_hdr_sz + sizeof(u32))) {
+                    printf("FILE: bogus chunk size for chunk:%d\n", chunk);
+                    goto ERR;
+                }
+
+                ret = process_fill_chunk(Bufstart, fd, chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+                    if (ret < 0) {
+                    goto ERR;
+                }
+
+                total_blocks += ret;
+                Bufstart += processLen;
+                curValidSparseMergeDataLen -= processLen;
+
+                printf("FILL: chunk:%d, wrote total_blocks:%d, processLen:%d, curValidSparseMergeDataLen:%d\n", 
+                                    chunk, total_blocks, processLen, curValidSparseMergeDataLen);
+                chunk ++;
+            }
+            break;
+
+            case CHUNK_TYPE_DONT_CARE:
+            {
+                if (chunk_header.total_sz != sparse_header.chunk_hdr_sz) {
+                    printf("DONT CARE: bogus chunk size for chunk:%d\n", chunk);
+                    goto ERR;
+                }
+
+                total_blocks += process_skip_chunk(fd, chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+                printf("NOTCARE: chunk:%d, wrote total_blocks:%d, processLen:%d, curValidSparseMergeDataLen:%d\n", 
+                                chunk, total_blocks, chunk_header.chunk_sz*sparse_header.blk_sz, curValidSparseMergeDataLen);
+                chunk ++;
+            }
+            break;
+
+            case CHUNK_TYPE_CRC32:
+            {
+                ret = process_crc32_chunk(Bufstart, crc32);
+                if (ret < 0) {
+                    printf("CRC32: bogus chunk size for chunk:%d\n", chunk);
+                    goto ERR;
+                }
+
+                Bufstart += 4;
+                curValidSparseMergeDataLen -= 4;
+
+                printf("CRC32: chunk:%d, wrote total_blocks:%d, processLen:%d, curValidSparseMergeDataLen:%d\n", 
+                                chunk, total_blocks, processLen, curValidSparseMergeDataLen);
+                chunk ++;
+            }
+            break;
+
+            default:
+            {
+                printf("Unknown chunk type:0x%4.4x\n", chunk_header.chunk_type);
+                goto ERR;
+            }
+            break;
+        }
+
+        if ((curValidSparseMergeDataLen < sizeof(chunk_header)) && (!isFinished)) {
+            whetherChunkDataNotEnough = 0;
+            flash_buffer_copy();
+            Readlen = read(ps, TmpBuf+curValidSparseMergeDataLen, SIZE_10M);
+            if (Readlen < SIZE_10M) {
+                printf("can't read %d, maybe file end!\n", SIZE_10M);
+                isFinished = 1;
+            }
+            curValidSparseMergeDataLen += Readlen;
+            continue;
+        }
+
+        if (whetherChunkDataNotEnough) {
+            whetherChunkDataNotEnough = 0;
+        }
+
+        if ((chunk == sparse_header.total_chunks) || (!curValidSparseMergeDataLen && isFinished)) {
+            printf("wrote total_blocks:%d, curValidSparseMergeDataLen:%d, isDeflatedFinished:%d\n", 
+                                chunk, curValidSparseMergeDataLen, isFinished);
+            if (sparse_header.total_blks == total_blocks) {
+                printf("wrote %d blocks, expected to write %d blocks.finished!\n", total_blocks, sparse_header.total_blks);
+                result = 0;
+            } else {
+                printf("wrote %d blocks, expected to write %d blocks.unfinished!\n", total_blocks, sparse_header.total_blks);
+                result = -1;
+            }
+            break;
+        }
+    }
+
+    free(TmpBuf);
+    TmpBuf = NULL;
+    free(copyBuf);
+    copyBuf = NULL;
+
+    return result;
+
+ERR:
+    if (TmpBuf != NULL) {
+        free(TmpBuf);
+        TmpBuf = NULL;
+    }
+
+    if (copyBuf != NULL) {
+        free(copyBuf);
+        copyBuf = NULL;
+    }
+
+    return -1;
+}
+
+static int hash_check(int fdin, unsigned int nbytes, unsigned char *hash)
+{
+    int ret = -1;
+    ssize_t len = 0;
+    unsigned long size;
+    unsigned char *in = NULL;
+    void *dgst = NULL;	/* use a private context for HASH */
+    unsigned char md_value[64]; //Maximum hash is 64 bytes for SHA512 and we use sha256 in swupdate
+    unsigned int md_len = 0;
+
+    if (!IsValidHash(hash)) {
+        return 0;
+    }
+
+    dgst = swupdate_HASH_init(SHA_DEFAULT);
+    if (!dgst) {
+        return -1;
+    }
+
+    in = (unsigned char *)malloc(BUFF_SIZE);
+    if (!in) {
+        goto exit;
+    }
+
+    while (nbytes > 0) {
+        memset(in, 0, BUFF_SIZE);
+        size = (nbytes < BUFF_SIZE ? nbytes : BUFF_SIZE);
+        len = read(fdin, in, size);
+        if (len < 0) {
+            ERROR("read error: I cannot go on\n");
+            goto exit;
+        }
+        nbytes -= len;
+        swupdate_HASH_update(dgst, in, len);
+    }
+
+    swupdate_HASH_final(dgst, md_value, &md_len);
+
+    if (md_len != SHA256_HASH_LENGTH || swupdate_HASH_compare(hash, md_value)) {
+        char hashstring[2 * SHA256_HASH_LENGTH + 1];
+        char newhashstring[2 * SHA256_HASH_LENGTH + 1];
+
+        hash_to_ascii(hash, hashstring);
+        hash_to_ascii(md_value, newhashstring);
+
+        ERROR("HASH mismatch : %s <--> %s", hashstring, newhashstring);
+        goto exit;
+    }
+    ret = 0;
+
+exit:
+    if (in) {
+        free(in);
+        in = NULL;
+    }
+
+    if (dgst) {
+        swupdate_HASH_cleanup(dgst);
+    }
+
+    return ret;
+}
+
+static int install_ext4_image(struct img_type *img,
+	void __attribute__ ((__unused__)) *data)
+{
+    int ret;
+    int fdout;
+
+    ret = hash_check(img->fdin, img->size, img->sha256);
+    if (ret != 0) {
+        return -1;
+    }
+
+    fdout = open(img->device, O_RDWR);
+    if (fdout < 0) {
+        TRACE("Device %s cannot be opened: %s", img->device, strerror(errno));
+        return -1;
+    }
+
+    ret = flash_write_ext4(img->fdin, img->size, fdout);
+
+    close(fdout);
+    return ret;
+}
+
+__attribute__((constructor))
+void ext4_handler(void)
+{
+    register_handler("ext4", install_ext4_image, IMAGE_HANDLER, NULL);
+}
