--- swupdate-2017.07/corelib/mtd-interface.c	2017-07-26 23:29:02.000000000 +0800
+++ swupdate-2017.07/corelib/mtd-interface.c	2019-04-12 15:21:05.302438600 +0800
@@ -146,6 +146,111 @@
 }
 
 
+int flash_erase_offset_size(int mtdnum, int offset, int size)
+{
+	int fd;
+	char mtd_device[80];
+	struct mtd_dev_info *mtd;
+	int noskipbad = 0;
+	int unlock = 0;
+	int ret = 0;
+	unsigned int eb, eb_start, eb_cnt, i;
+	uint8_t *buf;
+	struct flash_description *flash = get_flash_info();
+
+	if  (!mtd_dev_present(flash->libmtd, mtdnum)) {
+			ERROR("MTD %d does not exist\n", mtdnum);
+			return -ENODEV;
+	}
+	mtd = &flash->mtd_info[mtdnum].mtd;
+	snprintf(mtd_device, sizeof(mtd_device), "/dev/mtd%d", mtdnum);
+
+	if ((fd = open(mtd_device, O_RDWR)) < 0) {
+		ERROR( "%s: %s: %s", __func__, mtd_device, strerror(errno));
+		return -ENODEV;
+	}
+
+	/*
+	 * prepare to erase all of the MTD partition,
+	 */
+	buf = (uint8_t *)malloc(mtd->eb_size);
+	if (!buf) {
+		ERROR("No memory for temporary buffer of %d bytes",
+			mtd->eb_size);
+		close(fd);
+		return -ENOMEM;
+	}
+
+	eb_start = offset /mtd->eb_size ;
+	eb_cnt = size / mtd->eb_size;
+	for (eb = eb_start; eb < eb_start + eb_cnt; eb++) {
+
+		/* Always skip bad sectors */
+		if (!noskipbad) {
+			int isbad = mtd_is_bad(mtd, fd, eb);
+			if (isbad > 0) {
+				continue;
+			} else if (isbad < 0) {
+				if (errno == EOPNOTSUPP) {
+					noskipbad = 1;
+				} else {
+					ERROR("%s: MTD get bad block failed", mtd_device);
+					ret  = -EFAULT;
+					goto erase_out;
+				}
+			}
+		}
+
+		/*
+		 * In case of NOR flash, check if the flash
+		 * is already empty. This can save
+		 * an amount of time because erasing
+		 * a NOR flash is very time expensive.
+		 * NAND flash is always erased.
+		 */
+		if (!isNand(flash, mtdnum)) {
+			if (mtd_read(mtd, fd, eb, 0, buf, mtd->eb_size) != 0) {
+				ERROR("%s: MTD Read failure", mtd_device);
+				ret  = -EIO;
+				goto erase_out;
+			}
+
+			/* check if already empty */
+			for (i = 0; i < mtd->eb_size; i++) {
+				if (buf[i] != EMPTY_BYTE)
+					break;
+			}
+
+			/* skip erase if empty */
+			if (i == mtd->eb_size)
+				continue;
+
+		}
+
+		/* The sector contains data and it must be erased */
+		if (unlock) {
+			if (mtd_unlock(mtd, fd, eb) != 0) {
+				TRACE("%s: MTD unlock failure", mtd_device);
+				continue;
+			}
+		}
+
+		if (mtd_erase(flash->libmtd, mtd, fd, eb) != 0) {
+			ERROR("%s: MTD Erase failure", mtd_device);
+			ret  = -EIO;
+			goto erase_out;
+		}
+	}
+
+erase_out:
+	free(buf);
+
+	close(fd);
+
+	return ret;
+}
+
+
 void mtd_init(void)
 {
 	struct flash_description *flash = get_flash_info();
--- swupdate-2017.07/handlers/flash_handler.c	2019-04-09 19:14:00.650152400 +0800
+++ swupdate-2017.07/handlers/flash_handler.c	2019-04-12 15:22:01.656539900 +0800
@@ -47,6 +47,9 @@
 #define PROCMTD	"/proc/mtd"
 #define LINESIZE	80
 
+#define BL2_SIZE    (256*1024)
+#define TPL_SIZE    (2*1024*1024)
+
 void flash_handler(void);
 
 /*
@@ -78,7 +81,7 @@
 	unsigned char *filebuf = NULL;
 	size_t filebuf_max = 0;
 	size_t filebuf_len = 0;
-	long long mtdoffset = 0;
+	long long mtdoffset = img->seek;
 	int ifd = img->fdin;
 	int fd = -1;
 	bool failed = true;
@@ -373,11 +376,26 @@
 		return -1;
 	}
 
-	if(flash_erase(mtdnum)) {
-		ERROR("I cannot erasing %s",
-			img->device);
-		return -1;
-	}
+    if (strcmp(img->fname, "u-boot.bin.usb.bl2")==0) {
+    	if(flash_erase_offset_size(mtdnum, img->seek, BL2_SIZE)) {
+    		ERROR("I cannot erasing %s",
+    			img->device);
+    		return -1;
+    	}
+    } else if (strcmp(img->fname, "u-boot.bin.usb.tpl")==0) {
+    	if(flash_erase_offset_size(mtdnum, img->seek, TPL_SIZE)) {
+    		ERROR("I cannot erasing %s",
+    			img->device);
+    		return -1;
+    	}
+    } else {
+    	if(flash_erase(mtdnum)) {
+    		ERROR("I cannot erasing %s",
+    			img->device);
+    		return -1;
+    	}
+    }
+
 	TRACE("Copying %s into /dev/mtd%d", img->fname, mtdnum);
 	if (flash_write_image(mtdnum, img)) {
 		ERROR("I cannot copy %s into %s partition",
--- swupdate-2017.07/include/flash.h	2017-07-26 23:29:02.000000000 +0800
+++ swupdate-2017.07/include/flash.h	2019-04-12 15:21:05.302438600 +0800
@@ -68,6 +68,7 @@
 int get_mtd_from_device(char *s);
 int get_mtd_from_name(const char *s);
 int flash_erase(int mtdnum);
+int flash_erase_offset_size(int mtdnum, int offset, int size);
 
 struct flash_description *get_flash_info(void);
 #define isNand(flash, index) \
